{"pageProps":{"files":[{"title":"components/head.tsx","body":"import Head from \"next/head\";\n\nexport const Header = () => (\n  <Head>\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta\n      name=\"description\"\n      content=\"Full Stack Web Developer - Long Island, New York\"\n    />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      property=\"og:title\"\n      content=\"Nick Piscitelli - Full Stack Web Developer\"\n    />\n    <meta property=\"og:type\" content=\"website\" />\n    <meta property=\"og:url\" content=\"https://nickpiscitelli.com/\" />\n    <meta property=\"og:description\" content=\"Full Stack Web Developer\" />\n  </Head>\n);\n","active":true},{"title":"components/name.tsx","body":"import { useEffect, useState } from \"react\";\n\nconst name = \"Nick Piscitelli\";\nconst fullNameLetters = name.split(\"\");\n\nexport const HackerName = () => {\n  const [hackerName, setHackerName] = useState<string | undefined>(undefined);\n\n  let timer: boolean | NodeJS.Timer;\n  const updateCount = () => {\n    timer =\n      !timer &&\n      setInterval(() => {\n        const letter = fullNameLetters.shift();\n        if (letter) setHackerName(`${hackerName}${letter}`);\n      }, 250);\n\n    if (hackerName === name) clearInterval(timer as any);\n  };\n\n  useEffect(() => {\n    setHackerName(\"\");\n  }, []);\n\n  useEffect(() => {\n    updateCount();\n\n    return () => clearInterval(timer as any);\n  }, [hackerName]);\n\n  return (\n    <div className=\"font-mono\">\n      {hackerName}\n      {hackerName === name && (\n        <span className=\"blink align-top  font-thin relative top-[-1px]\">\n          |\n        </span>\n      )}\n    </div>\n  );\n};\n","active":false},{"title":"components/nav.tsx","body":"import { GithubIcon } from \"../icons/github\";\nimport { ThemePicker } from \"../components/picker\";\nimport { TerminalIcon } from \"../icons/terminal\";\nimport { HackerName } from \"./name\";\nimport { BlogIcon } from \"../icons/blog\";\n\nexport const Navbar = ({ themeSwitcher, userTheme }: any) => {\n  return (\n    <nav\n      id=\"main-nav\"\n      className=\"flex flex-wrap md:flex-nowrap shadow border-dracula-light border-b justify-between bg-dracula-dark py-3 px-6\"\n    >\n      <div className=\"flex mb-2 md:mb-0 self-center\">\n        <div className=\"w-[25px] h-[25px] relative top-[2px]\">\n          <TerminalIcon />\n        </div>\n        <div className=\"text-xl text-white font-bold align-middle self-center pl-2\">\n          {/* <HackerName /> */}\n        </div>\n      </div>\n\n      <div className=\"flex\">\n        <a\n          href=\"https://github.com/NickPiscitelli\"\n          className=\"w-[25px] self-center icon github\"\n        >\n          <GithubIcon />\n        </a>\n        <ThemePicker themeSwitcher={themeSwitcher} userTheme={userTheme} />\n      </div>\n    </nav>\n  );\n};\n","active":false},{"title":"components/panels.tsx","body":"import { Tab } from \"@headlessui/react\";\nimport { CodeBlock } from \"react-code-blocks\";\nimport { FileStates, FileState } from \"../types\";\n\nexport const CodePanels = ({\n  userTheme,\n  panels,\n}: {\n  userTheme: any;\n  panels: FileStates;\n}) => {\n  function sizePost(code: string) {\n    const lines = code.split(\"\\n\");\n    if (lines.length < 50) code += \"\\n\".repeat(50 - lines.length);\n    return code;\n  }\n\n  return (\n    <Tab.Panels className=\"tabbed-code-pane scrollbar-hide\">\n      {panels.map((tab, i) => (\n        <Tab.Panel\n          key={i}\n          className={`${\n            tab.title === \"Introduction.tsx\" && \"lg:hidden\"\n          } text-sm h-[80vh]`}\n        >\n          <CodeBlock\n            customStyle={{\n              wordBreak: \"break-word\",\n              whiteSpace: \"pre-wrap\",\n              paddingTop: 5,\n              paddingRight: 26,\n              borderRadius: 0,\n              zIndex: 10,\n            }}\n            text={sizePost(tab.body)}\n            theme={userTheme}\n            language={tab.title.split(/\\./)[1]}\n            showLineNumbers\n            wrapLines\n          />\n        </Tab.Panel>\n      ))}\n    </Tab.Panels>\n  );\n};\n","active":false},{"title":"components/picker.tsx","body":"import * as codeBlockThemes from \"react-code-blocks\";\n\nconst shallowCompare = (\n  obj1: Record<string, string>,\n  obj2: Record<string, string>\n) =>\n  obj1 &&\n  obj2 &&\n  Object.keys(obj1).length === Object.keys(obj2).length &&\n  Object.keys(obj1).every(\n    (key) => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]\n  );\n\nconst fetchThemeVariable = (name: string) => {\n  return (codeBlockThemes as any)[name];\n};\n\nconst themes = [\n  \"a11yLight\",\n  \"anOldHope\",\n  \"androidstudio\",\n  \"arta\",\n  \"atomOneDark\",\n  \"atomOneLight\",\n  \"codepen\",\n  \"dracula\",\n  \"far\",\n  \"github\",\n  \"googlecode\",\n  \"hopscotch\",\n  \"hybrid\",\n  \"irBlack\",\n  \"monoBlue\",\n  \"monokaiSublime\",\n  \"monokai\",\n  \"nord\",\n  \"noctisViola\",\n  \"obsidian\",\n  \"ocean\",\n  \"paraisoDark\",\n  \"paraisoLight\",\n  \"pojoaque\",\n  \"purebasic\",\n  \"railscast\",\n  \"rainbow\",\n  \"shadesOfPurple\",\n  \"solarizedDark\",\n  \"solarizedLight\",\n  \"sunburst\",\n  \"tomorrowNightBlue\",\n  \"tomorrowNightBright\",\n  \"tomorrowNightEighties\",\n  \"tomorrowNight\",\n  \"tomorrow\",\n  \"vs2015\",\n  \"xt256\",\n  \"zenburn\",\n];\n\nexport const ThemePicker = ({ themeSwitcher, userTheme }: any) => {\n  return (\n    <div className=\"pl-2 pr-2 ml-4 py-2 rounded font-sm bg-dracula\">\n      <select\n        onChange={(event) => {\n          themeSwitcher((codeBlockThemes as any)[event.target.value]);\n        }}\n        className=\"text-white  bg-dracula ml-2\"\n      >\n        {themes.map((theme, i) =>\n          <option key={i} selected={shallowCompare(fetchThemeVariable(theme), userTheme)}>\n            {theme}\n          </option>\n        )}\n      </select>\n    </div>\n  );\n};\n","active":false},{"title":"components/tabs.tsx","body":"import { Tab } from \"@headlessui/react\";\nimport { Fragment } from \"react\";\nimport { FileState } from \"../types\";\nexport const FileTabs = ({ tabs, setTab }: any) => {\n  return (\n    <Tab.List className=\"relative z-20 shadow-[0_4px_2px_-2px_rgba(0,0,0,0.3)] flex overflow-x-auto scrollbar-hide\">\n      {tabs.map((tab: FileState, i: number) => (\n        <Tab key={i} as={Fragment}>\n          {({ selected }) => (\n            <div\n              onClick={() => {\n                tab.active = true;\n                setTab([...tabs]);\n              }}\n              data-tab={tab.title}\n              className={`${\n                tab.title === \"Introduction.tsx\" && \"lg:hidden\"\n              } outline-none text-left relative pl-8 py-3 grow min-w-[200px] border-r border-dracula-light text-xs bg-dracula text-white`}\n            >\n              {tab.title}\n              {selected && (\n                <i className=\"rounded-xl bg-slate-100 w-[8px] h-[8px] align-right top-4 absolute right-4 block\">\n                  &nbsp;\n                </i>\n              )}\n            </div>\n          )}\n        </Tab>\n      ))}\n    </Tab.List>\n  );\n};\n","active":false},{"title":"pages/_app.tsx","body":"import \"../styles/globals.css\";\nimport type { AppProps } from \"next/app\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />;\n}\n","active":false},{"title":"pages/_document.tsx","body":"import { Html, Head, Main, NextScript } from \"next/document\";\nimport { Header } from \"../components/head\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Header />\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n","active":false},{"title":"pages/blog.tsx","body":"import { Navbar } from \"../components/nav\";\nimport { Tab } from \"@headlessui/react\";\nimport { dracula } from \"react-code-blocks\";\nimport { useState } from \"react\";\nimport { FileTabs } from \"../components/tabs\";\nimport { CodePanels } from \"../components/panels\";\nimport { readFileSync, readdirSync } from \"fs\";\nimport { BlogState, BlogStates } from \"../types\";\n\nexport default function Blog({ blogs }: { blogs: BlogStates }) {\n  const [BlogStates, setBlogStates] = useState<BlogStates>(blogs);\n  const [userTheme, setUserTheme] = useState(dracula);\n\n  const setActiveTab = (tab: BlogState) => {\n    for (const b of BlogStates) {\n      b.active = b.title === tab.title;\n    }\n    setBlogStates([...blogs]);\n  };\n  return (\n    <main>\n      <Navbar themeSwitcher={setUserTheme} userTheme={userTheme} />\n      <section className=\"code cf flex\">\n        <div className=\"w-screen shadow-[-7px_0px_10px_1px_rgba(0,0,0,0.3)]\">\n          <Tab.Group>\n            <FileTabs setTab={setActiveTab} tabs={BlogStates} />\n            <CodePanels userTheme={userTheme} panels={BlogStates} />\n          </Tab.Group>\n        </div>\n      </section>\n    </main>\n  );\n}\n\nexport function getStaticProps() {\n  const blogs = [];\n  const files = readdirSync(process.cwd() + \"/blog\");\n\n  for (const blog of files) {\n    const post = readFileSync(process.cwd() + \"/blog/\" + blog, \"utf8\");\n    const [title, body, active = false] = post.split(\"\\n================\\n\");\n    blogs.push({\n      title,\n      body,\n      active,\n    });\n  }\n\n  blogs[0].active = true;\n\n  return { props: { blogs } };\n}\n","active":false},{"title":"pages/index.tsx","body":"import { Navbar } from \"../components/nav\";\nimport { Tab } from \"@headlessui/react\";\nimport { CodeBlock, dracula } from \"react-code-blocks\";\nimport { useEffect, useState } from \"react\";\nimport { Introduction } from \"../intro/intro\";\nimport { FileTabs } from \"../components/tabs\";\nimport { CodePanels } from \"../components/panels\";\nimport { readFileSync, readdirSync } from \"fs\";\nimport { FileState, FileStates } from \"../types\";\n\nexport default function Home({ files }: { files: FileStates }) {\n  const [fileStates, setFileStates] = useState<FileStates>(files);\n  const [userTheme, setUserTheme] = useState(dracula);\n\n  const setActiveTab = (tab: FileState) => {\n    for (const b of fileStates) {\n      b.active = b.title === tab.title;\n    }\n    setFileStates([...fileStates]);\n  };\n\n  useEffect(() => {\n    window.innerWidth > 700 &&\n      setTimeout(\n        () =>\n          (\n            document.querySelector('[data-tab=\"pages/index.tsx\"]') as any\n          ).click(),\n        500\n      );\n  }, []);\n\n  return (\n    <main>\n      <Navbar themeSwitcher={setUserTheme} userTheme={userTheme} />\n      <section className=\"code cf flex\">\n        <div className=\"half-screen hidden md:block  h-full grow-0 shadow-inner shrink-0\">\n          <CodeBlock\n            customStyle={{ borderRadius: 0 }}\n            text={`${Introduction}${\"\\n\".repeat(50)}`}\n            theme={userTheme}\n            language={\"tsx\"}\n            showLineNumbers\n            wrapLines\n          />\n        </div>\n        <div className=\"w-screen lg:w-[50vw] shadow-[-7px_0px_10px_1px_rgba(0,0,0,0.3)]\">\n          <Tab.Group>\n            <FileTabs setTab={setFileStates} tabs={fileStates} />\n            <CodePanels userTheme={userTheme} panels={fileStates} />\n          </Tab.Group>\n        </div>\n      </section>\n    </main>\n  );\n}\n\nexport function getStaticProps() {\n  const panels: FileStates = [];\n\n  for (const dir of [\"components\", \"pages\", \"icons\"]) {\n    const files = readdirSync(process.cwd() + `/${dir}`);\n    for (const file of files) {\n      const body = readFileSync(`${process.cwd()}/${dir}/${file}`, \"utf8\");\n      panels.push({\n        title: `${dir}/${file}`,\n        body,\n        active: false,\n      });\n    }\n  }\n\n  panels[0].active = true;\n\n  return { props: { files: panels } };\n}","active":false},{"title":"icons/blog.tsx","body":"export const BlogIcon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth={1.5}\n      stroke=\"white\"\n      className=\"w-6 h-6\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10\"\n      />\n    </svg>\n  );\n};\n","active":false},{"title":"icons/github.tsx","body":"export const GithubIcon = () => {\n  return (\n    <svg\n      version=\"1.2\"\n      baseProfile=\"tiny\"\n      id=\"Layer_1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 2350 2314.8\"\n      fill=\"white\"\n    >\n      <path\n        d=\"M1175,0C525.8,0,0,525.8,0,1175c0,552.2,378.9,1010.5,890.1,1139.7c-5.9-14.7-8.8-35.3-8.8-55.8v-199.8H734.4\nc-79.3,0-152.8-35.2-185.1-99.9c-38.2-70.5-44.1-179.2-141-246.8c-29.4-23.5-5.9-47,26.4-44.1c61.7,17.6,111.6,58.8,158.6,120.4\nc47,61.7,67.6,76.4,155.7,76.4c41.1,0,105.7-2.9,164.5-11.8c32.3-82.3,88.1-155.7,155.7-190.9c-393.6-47-581.6-240.9-581.6-505.3\nc0-114.6,49.9-223.3,132.2-317.3c-26.4-91.1-61.7-279.1,11.8-352.5c176.3,0,282,114.6,308.4,143.9c88.1-29.4,185.1-47,284.9-47\nc102.8,0,196.8,17.6,284.9,47c26.4-29.4,132.2-143.9,308.4-143.9c70.5,70.5,38.2,261.4,8.8,352.5c82.3,91.1,129.3,202.7,129.3,317.3\nc0,264.4-185.1,458.3-575.7,499.4c108.7,55.8,185.1,214.4,185.1,331.9V2256c0,8.8-2.9,17.6-2.9,26.4\nC2021,2123.8,2350,1689.1,2350,1175C2350,525.8,1824.2,0,1175,0L1175,0z\"\n      />\n    </svg>\n  );\n};\n","active":false},{"title":"icons/terminal.tsx","body":"export const TerminalIcon = () => {\n  return (\n    <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M4 17L10 11L4 5M12 19H20\"\n        stroke=\"#ffffff\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n","active":false}]},"__N_SSG":true}